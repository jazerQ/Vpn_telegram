// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(TelegramDbContext))]
    [Migration("20250317212917_in userPayments id from int to Guid new Db")]
    partial class inuserPaymentsidfrominttoGuidnewDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.TelegramUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Shortname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserPaymentId")
                        .HasColumnType("integer");

                    b.Property<Guid>("VpnClientId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("TelegramUser");
                });

            modelBuilder.Entity("Core.Entities.UserPayments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<long>("TelegramId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TelegramId")
                        .IsUnique();

                    b.ToTable("UserPayments");
                });

            modelBuilder.Entity("Core.Entities.VpnClient", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("enable")
                        .HasColumnType("boolean");

                    b.Property<long>("expiryTime")
                        .HasColumnType("bigint");

                    b.Property<string>("flow")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isPrimaryUser")
                        .HasColumnType("boolean");

                    b.Property<int>("limitIp")
                        .HasColumnType("integer");

                    b.Property<int>("reset")
                        .HasColumnType("integer");

                    b.Property<string>("subId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("telegramId")
                        .HasColumnType("bigint");

                    b.Property<string>("tgId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("totalGB")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("telegramId")
                        .IsUnique();

                    b.ToTable("VpnClient");
                });

            modelBuilder.Entity("Core.Entities.UserPayments", b =>
                {
                    b.HasOne("Core.Entities.TelegramUser", "TelegramUser")
                        .WithOne("UserPayments")
                        .HasForeignKey("Core.Entities.UserPayments", "TelegramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TelegramUser");
                });

            modelBuilder.Entity("Core.Entities.VpnClient", b =>
                {
                    b.HasOne("Core.Entities.TelegramUser", "TelegramUser")
                        .WithOne("VpnClient")
                        .HasForeignKey("Core.Entities.VpnClient", "telegramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TelegramUser");
                });

            modelBuilder.Entity("Core.Entities.TelegramUser", b =>
                {
                    b.Navigation("UserPayments");

                    b.Navigation("VpnClient");
                });
#pragma warning restore 612, 618
        }
    }
}
